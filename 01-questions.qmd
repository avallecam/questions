---
title: "Q&As"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Introduction

```
You are R software teacher specialising in outbreak analytics and epidemic modelling. Give your answer entirely as R code, including some brief comments explaining key parts of the code. Do not include the original question in your response. Begin your response with a commented line introducing the code.
```

```
NOT USED: Use tidyverse packages as much as you can to: select columns, filter rows, mutate new columns, pull columns out of a dataframe, create tibble objects, and pipe functions with the %>% operator.
```

## Q1: growth rate

Question: How to calculate the weekly growth rate of an outbreak? 

Conditions: 
- Use the first list element from the Simulated Ebola outbreak ebola_sim_clean object from the outbreaks R package. The name of the first element is linelist.
- Use the "date of onset" column to calculate the weekly growth rate. 
- Keep the first 20 weeks of the period of the analysis.

### A1

```{r}
# Calculate the weekly growth rate of an outbreak

# Load required packages
library(outbreaks)
library(i2extras)
library(dplyr)

# Load the simulated Ebola outbreak data
data(ebola_sim_clean)

# Extract the first element of the list
linelist <- ebola_sim_clean[[1]]

# Convert the data to an incidence2 object
incidence2_data <- incidence2::incidence(
  x = linelist, 
  date_index = "date_of_onset",
  interval = "week"
)

# Filter the dataset to keep the first 20 weeks. 
incidence2_filter <- incidence2_data[1:20,]

# Model the incidence
incidence2_fit <- fit_curve(incidence2_filter, model = "poisson", alpha = 0.05)

# Print the result
growth_rate(incidence2_fit)

# Plot the result
plot(incidence2_fit)
```

- The `outbreaks` package is loaded to access the simulated Ebola outbreak data.
- The `ebola_sim_clean` object from the package contains the simulated outbreak data.
- The `linelist` object contains the first list element from `ebola_sim_clean`.
- The `incidence()` function from the `incidence2` package converts the data object `linelist` to an `incidence2` class object.
- The `date_of_onset` column is used in the `date_index` argument as the onset dates of the outbreak.
- The `"week"` text string is used to count number of cases per week interval to calculate the weekly growth rate.  
- The `incidence2` object provides observations arranged in descendant order with respect to the `date_index`.
- The number of weeks to consider is set to 20 and stored in the `dat_filter` object.
- The `fit_curve()` function from the `i2extras` package fits a Poisson linear regression model to the epicurve in the `dat_filter` object with an alpha value of `0.05` to calculate the 95% confidence intervals.
- The `growth_rate()` function calculate the weekly growth/decay rate.
- The `plot()` function plot the fitted epicurve.

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

### Reference

- https://www.reconverse.org/i2extras/articles/fitting_epicurves.html

## Q2: epidemiological parameters

Question: How to extract the serial interval distribution parameters of Ebola Virus Disease estimated from the WHO Ebola Response Team in 2015?

### A2

```{r}
# Extract the serial interval distribution parameters of Ebola Virus Disease estimated from the WHO Ebola Response Team in 2015

# Load required packages
library(epiparameter)

# Extract parameter by disease, distribution, author
epidist_output <- epidist_db(
  disease = "Ebola",
  epi_dist = "serial_interval",
  author = "WHO_Ebola_Response_Team"
)

# Plot the epidist object
plot(epidist_output, day_range = 0:50)
```

- The `epiparameter` package is loaded to access the library of epidemiological parameters.
- The `epidist_db()` function extract a parameter by specifying the disease name in the `disease` argument, epidemiological distribution in the `epi_dist` argument, and author name in the `author` argument.
- The `epidist_db()` function creates an `epidist` object.
- The `plot` function creates a plot from `epidist` objects. 
- The `epiparam()` functions provide access to a data frame with all the names of diseases, epidemiological distribution, and authors.

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

### Reference

- https://epiverse-trace.github.io/epiparameter/articles/epiparameter.html

## Q3: reproduction number

Questions: How to quantify the time-varying reproduction number (Rt) of the outbreak?

Conditions:
- Use the first list element from the Simulated Ebola outbreak ebola_sim_clean object from the outbreaks R package. The name of the first element is linelist.
- Use the "date of onset" column to calculate the weekly growth rate. 
- Use the serial interval distribution parameters of Ebola Virus Disease estimated from the WHO Ebola Response Team in 2015 to quantify the time-varying reproduction number.
- Assume a known mean and standard deviation values of the serial interval distribution to quantify the time-varying reproduction number.

### A3

```{r}
# Quantify the time-varying reproduction number (Rt) of the outbreak

# Load required packages
library(outbreaks)
library(incidence)
library(epiparameter)
library(EpiEstim)
library(tidyverse)

# Load the simulated Ebola outbreak data
data(ebola_sim_clean)

# Extract the first element of the list
linelist <- ebola_sim_clean$linelist

# Convert the data to an incidence object
incidence_data <- incidence::incidence(linelist$date_of_onset)

# Extract parameter by disease, distribution, author
epidist_ebola <- epidist_db(
  disease = "Ebola",
  epi_dist = "serial_interval",
  author = "WHO_Ebola_Response_Team"
)

# Estimate the time-varying reproduction number
epiestim_output <- estimate_R(
  incid = incidence_data, 
  method = "parametric_si",
  config = make_config(
    mean_si = epidist_ebola$summary_stats$centre_spread$mean,
    std_si = epidist_ebola$summary_stats$centre_spread$sd
  )
)

# Plot the time-varying reproduction number
plot(epiestim_output)
```

- The `outbreaks` package is loaded to access the simulated Ebola outbreak data.
- The `epiparameter` package is loaded to access the library of epidemiological parameters.
- The `ebola_sim_clean` object from the package contains the simulated outbreak data.
- The `linelist` object contains the first list element from `ebola_sim_clean`.
- The `incidence()` function from the `incidence` package converts the vector `date_of_onset` from the `linelist` data frame to an `incidence` class object.
- The `epidist_db()` function from the `epiparameter` package extract a parameter by specifying the disease name in the `disease` argument, epidemiological distribution in the `epi_dist` argument, and author name in the `author` argument.
- The `estimate_R()` function from the `EpiEstim` package estimates the time-varying reproduction number (Rt). We provide the `incidence_data`, specify the method as `"parametric_si"` (parametric with a known serial interval), and pass the serial interval distribution parameters using the `make_config` function.
- The `plot` function creates three plots from the `estimate_R` class object. 

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

## Q4 projection

Questions: How to project the future trajectory of the outbreak?

Conditions:
- 

### A4

```{r}
# Forecast the future trajectory of the outbreak

# Load required packages
library(outbreaks)
library(incidence)
library(i2extras)
library(epiparameter)
library(epitrix)
library(projections)
library(tidyverse)

# Load the simulated Ebola outbreak data
data(ebola_sim_clean)

# Extract the first element of the list
linelist <- ebola_sim_clean$linelist

# Convert the data to an incidence2 object
incidence2_data <- incidence2::incidence(
  x = linelist, 
  date_index = "date_of_onset",
  interval = "day"
)

# Filter the incidence2 object to keep the first 48 weeks. 
incidence2_filter <- incidence2_data[1:48,]

# Convert the filtered incidence2 object to an incidence object
incidence1_filter <- incidence2_filter %>% 
  uncount(count) %>% 
  pull(date_index) %>% 
  incidence::incidence()

# Model the incidence
incidence2_fit <- fit_curve(
  x = incidence2_filter,
  model = "poisson",
  alpha = 0.05
)

# Extract parameter by disease, distribution, author
epidist_ebola_si <- epidist_db(
  disease = "Ebola",
  epi_dist = "serial_interval",
  author = "WHO_Ebola_Response_Team"
)

# Discretise the continuous distribution
discrete_ebola_si <- discretise(epidist_ebola_si)

# Convert from epidist to distcrete class object
distcrete_ebola_si <- 
  distcrete::distcrete(
    name = "gamma",
    shape = discrete_ebola_si$prob_dist$parameters$shape,
    scale = discrete_ebola_si$prob_dist$parameters$scale,
    interval = discrete_ebola_si$prob_dist$interval,
    w = discrete_ebola_si$prob_dist$w
  )

# Transform the growth rate into a reproductive number
reproductive_basic <- 
  epitrix::lm2R0_sample(
    x = incidence2_fit %>% pull(model) %>% pluck(1),
    w = discrete_ebola_si$prob_dist,
    n = 500
  )

# Project the future incidence
incidence1_projection <- 
  projections::project(
    x = incidence1_filter, 
    R = reproductive_basic,
    si = distcrete_ebola_si, 
    n_sim = 1000, 
    n_days = 14, 
    R_fix_within = TRUE
  )

# Plot projections object
plot(incidence1_filter) %>% 
  add_projections(
    x = incidence1_projection,
    quantiles = c(0.025, 0.5, 0.975)
  )
```

- Project over two weeks

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

### Reference

- https://epiverse-trace.github.io/epiparameter/articles/extract_convert.html
- http://www.repidemicsconsortium.org/epitrix/reference/r2R0.html
- http://www.repidemicsconsortium.org/epitrix/reference/gamma_tools.html
- https://www.reconlearn.org/solutions/real-time-response-2.html

## Q5: susceptibility matrices

Question: How to create the two heterogeneous susceptibility matrices to estimate the final size of an epidemic with the `finalsize` package?

Conditions:
- The population is divided in five age groups: 0 – 4, 5 – 17, 18 – 39, 40 – 64, and 65 and over.
- The susceptibility between age groups differs in the following way:
    - 20% in age group 0 – 4, 
    - 50% in age group 5 – 17,
    - 60% in age group 18 – 39,
    - 90% in age group 40 – 64,
    - 100% in age group of 65 and over,
- An immunization campaign generated within-age group variation in susceptibility.
- The immunization effect in all age groups is 25%.
- The known proportion of the immunized population in all age groups is 40%.

### A5

```{r}
# Create the susceptibility matrices for variability between and within groups

# Load required packages
library(tidyverse)

# Define the immunization effect
immunization_effect <- 0.25

# susceptibility matrix
susceptibility <- tibble(
  age_group = c("[0,5)", "[5,18)", "[18,40)", "[40,65)", "65+"),
  unimmunised = c(0.2, 0.5, 0.6, 0.9, 1.0)
) %>%
  mutate(immunised = unimmunised * (1 - immunization_effect)) %>%
  column_to_rownames(var = "age_group") %>%
  as.matrix()

susceptibility

# demography-in-susceptibility matrix
p_susceptibility <- tibble(
  age_group = c("[0,5)", "[5,18)", "[18,40)", "[40,65)", "65+"),
  unimmunised = c(0.6, 0.6, 0.6, 0.6, 0.6)
) %>%
  mutate(immunised = 1 - unimmunised) %>%
  column_to_rownames(var = "age_group") %>%
  as.matrix()

p_susceptibility
```

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

### Reference

- https://epiverse-trace.github.io/finalsize/articles/susceptibility_matrices.html

## Q6: final size of an epidemic 

Question: How to calculate the final size of an epidemic accounting for heterogeneous social contact and homogeneous susceptibility in all age groups?

Conditions:
- 

### A6

```{r}
# Calculate the final size of an epidemic

library(finalsize)
library(socialmixr)
library(tidyverse)

# get UK polymod data
polymod <- socialmixr::polymod
contact_data <- socialmixr::contact_matrix(
  polymod,
  countries = "United Kingdom",
  age.limits = c(0, 5, 18, 40, 65),
  symmetric = TRUE
)

# get the contact matrix and demography data
contact_matrix <- t(contact_data$matrix)

# scale the contact matrix so the largest eigenvalue is 1.0
# this is to ensure that the overall epidemic dynamics correctly reflect
# the assumed value of R0
contact_matrix_scaled <- contact_matrix / max(Re(eigen(contact_matrix)$values))

# Define population in each age group
demography_vector <- contact_data$demography$population
demography_groups <- contact_data$demography$age.group

# divide each row of the contact matrix by the corresponding demography
# this reflects the assumption that each individual in group {j} make contacts
# at random with individuals in group {i}
contact_matrix_random <- contact_matrix_scaled / demography_vector

# Define susceptibility of each group
# susceptibility matrix
susceptibility <- tibble(
  age_group = demography_groups,
  susceptible = c(0.8, 0.8, 0.8, 0.8, 0.8)
) %>%
  column_to_rownames(var = "age_group") %>%
  as.matrix()

susceptibility

# Assume uniform susceptibility within age groups
# demography-in-susceptibility matrix
p_susceptibility <- tibble(
  age_group = demography_groups,
  susceptible = c(1.0, 1.0, 1.0, 1.0, 1.0)
) %>%
  column_to_rownames(var = "age_group") %>%
  as.matrix()

p_susceptibility

# R0 of the disease
r0 <- 1.5 # assumed for pandemic influenza

# Calculate the proportion of individuals infected in each age group
final_size(
  r0 = r0,
  contact_matrix = contact_matrix_random,
  demography_vector = demography_vector,
  susceptibility = susceptibility,
  p_susceptibility = p_susceptibility
)
```

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 

Additionally, make sure to adjust the serial interval distribution parameters according to the specific outbreak you are analyzing.

### Reference

- https://epiverse-trace.github.io/finalsize/articles/susceptibility_matrices.html
- https://epiverse-trace.github.io/finalsize/articles/varying_contacts.html
